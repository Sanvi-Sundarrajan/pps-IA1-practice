gcc -g p6original.c
îº§ gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) info break

Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000000130b in main at main.c:35

(gdb) s
The program is not being run.
(gdb) run
Starting program: /home/a.out 

Breakpoint 1, main () at main.c:35
35          input_two_string(a,b);
(gdb) s
input_two_string (
    a=0x9c0000009c0 <error: Cannot access memory at address 0x9c0000009c0>, 
    b=0x9c0000009c0 <error: Cannot access memory at address 0x9c0000009c0>)
    at main.c:13
13        {
(gdb) n
14          printf("Enter the two strings \n");
(gdb) n
Enter the two strings 
15          scanf("%s%s",a,b);
(gdb) n
hello world 
16        }
(gdb) p a
$1 = 0x7fffffffeb00 "hello"
(gdb) p b
$2 = 0x7fffffffeb70 "world"
(gdb) n
main () at main.c:36
36          int result=str_cmp(a,b);
(gdb) s
str_cmp (
    a=0x5555555551e5 <input_two_string+60> "\220\311\303\363\017\036\372UH\211\345H\211}\350H\211u\340\307", <incomplete sequence \374>, b=0x0) at main.c:18
18        { 
(gdb) n
20          for(i = 0;a[i]==b[i]&&b[i] != '\0';i++);
(gdb) n
21            return a[i]-b[i];
(gdb) n
22        }
(gdb) n
main () at main.c:37
37          output(a,b,result);
(gdb) s
output (a=0xffffeb00 <error: Cannot access memory at address 0xffffeb00>, 
    b=0x7fffffffeb70 "world", result=32767) at main.c:24
24        {
(gdb) n
25          if(result<0)
(gdb) n
26            printf("%s is greater than %s\n",b,a);
(gdb) n
world is greater than hello
31        }
(gdb) n
main () at main.c:38
38          return 0;
(gdb) s
39        }
(gdb) c
Continuing.
[Inferior 1 (process 6906) exited normally]
(gdb) 